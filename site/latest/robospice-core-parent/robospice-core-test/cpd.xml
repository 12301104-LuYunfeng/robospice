<?xml version="1.0" encoding="UTF-8"?>
<pmd-cpd>
<duplication lines="35" tokens="259">
<file line="566" path="/Users/stephanenicolas/git/robospice/robospice-core-parent/robospice-core-test/src/main/java/com/octo/android/robospice/request/RequestProcessorTest.java"/>
<file line="600" path="/Users/stephanenicolas/git/robospice/robospice-core-parent/robospice-core-test/src/main/java/com/octo/android/robospice/request/RequestProcessorTest.java"/>
<codefragment>
<![CDATA[
    public void testAddRequest_when_something_is_found_in_cache_after_expiry_and_requests_accepts_dirty_cache() throws CacheLoadingException, CacheSavingException, InterruptedException,
        CacheCreationException {
        // given
        CachedSpiceRequestStub<String> stubRequest = createSuccessfulRequest(TEST_CLASS, TEST_CACHE_KEY, TEST_DURATION, TEST_RETURNED_DATA, WAIT_BEFORE_REQUEST_EXECUTION);
        stubRequest.setAcceptingDirtyCache(true);

        RequestListenerWithProgressStub<String> mockRequestListener = new RequestListenerWithProgressStub<String>();
        Set<RequestListener<?>> requestListenerSet = new HashSet<RequestListener<?>>();
        requestListenerSet.add(mockRequestListener);

        EasyMock.expect(mockCacheManager.loadDataFromCache(EasyMock.eq(TEST_CLASS), EasyMock.eq(TEST_CACHE_KEY), EasyMock.eq(TEST_DURATION))).andReturn(null);
        EasyMock.expect(mockCacheManager.loadDataFromCache(EasyMock.eq(TEST_CLASS), EasyMock.eq(TEST_CACHE_KEY), EasyMock.anyLong())).andReturn(TEST_RETURNED_DATA);
        EasyMock.expect(mockCacheManager.saveDataToCacheAndReturnData(EasyMock.eq(TEST_RETURNED_DATA), EasyMock.eq(TEST_CACHE_KEY))).andReturn(TEST_RETURNED_DATA);
        EasyMock.expectLastCall().anyTimes();
        EasyMock.replay(mockCacheManager);

        // when
        requestProcessorUnderTest.addRequest(stubRequest, requestListenerSet);

        mockRequestListener.await(REQUEST_COMPLETION_TIME_OUT);

        // then
        EasyMock.verify(mockCacheManager);
        assertTrue(mockRequestListener.isExecutedInUIThread());
        assertTrue(mockRequestListener.isSuccessful());

        // when
        mockRequestListener.resetSuccess();
        mockRequestListener.await(REQUEST_COMPLETION_TIME_OUT);
        assertTrue(mockRequestListener.isExecutedInUIThread());
        assertTrue(stubRequest.isLoadDataFromNetworkCalled());
        assertTrue(mockRequestListener.isSuccessful());
    }

    public void testAddRequest_when_nothing_is_found_in_cache_after_expiry_and_requests_accepts_dirty_cache() throws CacheLoadingException, CacheSavingException, InterruptedException,
]]>
</codefragment>
</duplication>
<duplication lines="18" tokens="189">
<file line="924" path="/Users/stephanenicolas/git/robospice/robospice-core-parent/robospice-core-test/src/main/java/com/octo/android/robospice/request/RequestProcessorTest.java"/>
<file line="970" path="/Users/stephanenicolas/git/robospice/robospice-core-parent/robospice-core-test/src/main/java/com/octo/android/robospice/request/RequestProcessorTest.java"/>
<codefragment>
<![CDATA[
        stubRequestHighPriority.setPriority(SpiceRequest.PRIORITY_HIGH);

        RequestListenerStub<String> mockRequestListener = new RequestListenerStub<String>();
        Set<RequestListener<?>> requestListenerSet = new HashSet<RequestListener<?>>();
        requestListenerSet.add(mockRequestListener);

        EasyMock.expect(mockCacheManager.loadDataFromCache(EasyMock.eq(TEST_CLASS), EasyMock.anyObject(), EasyMock.eq(TEST_DURATION))).andReturn(null);
        EasyMock.expectLastCall().anyTimes();
        EasyMock.expect(mockCacheManager.saveDataToCacheAndReturnData(EasyMock.eq(TEST_RETURNED_DATA), EasyMock.eq(TEST_CACHE_KEY))).andReturn(TEST_RETURNED_DATA);
        EasyMock.expectLastCall().anyTimes();
        EasyMock.expect(mockCacheManager.saveDataToCacheAndReturnData(EasyMock.eq(TEST_RETURNED_DATA2), EasyMock.eq(TEST_CACHE_KEY2))).andReturn(TEST_RETURNED_DATA2);
        EasyMock.expectLastCall().anyTimes();
        EasyMock.replay(mockCacheManager);

        executorService.pause();
        final int lowRequestCount = 10;
        for (int i = 0; i < lowRequestCount; i++) {
            CachedSpiceRequestStub<String> stubRequestLowPriority = createSuccessfulRequest(TEST_CLASS, TEST_RETURNED_DATA);
]]>
</codefragment>
</duplication>
<duplication lines="14" tokens="136">
<file line="164" path="/Users/stephanenicolas/git/robospice/robospice-core-parent/robospice-core-test/src/main/java/com/octo/android/robospice/request/RequestProcessorTest.java"/>
<file line="372" path="/Users/stephanenicolas/git/robospice/robospice-core-parent/robospice-core-test/src/main/java/com/octo/android/robospice/request/RequestProcessorTest.java"/>
<codefragment>
<![CDATA[
    public void testAddRequest_when_nothing_is_found_in_cache_and_request_succeeds() throws CacheLoadingException, CacheSavingException, InterruptedException, CacheCreationException {
        // given
        CachedSpiceRequestStub<String> stubRequest = createSuccessfulRequest(TEST_CLASS, TEST_CACHE_KEY, TEST_DURATION, TEST_RETURNED_DATA);

        RequestListenerWithProgressStub<String> mockRequestListener = new RequestListenerWithProgressStub<String>();
        Set<RequestListener<?>> requestListenerSet = new HashSet<RequestListener<?>>();
        requestListenerSet.add(mockRequestListener);

        EasyMock.expect(mockCacheManager.loadDataFromCache(EasyMock.eq(TEST_CLASS), EasyMock.eq(TEST_CACHE_KEY), EasyMock.eq(TEST_DURATION))).andReturn(null);
        EasyMock.expect(mockCacheManager.saveDataToCacheAndReturnData(EasyMock.eq(TEST_RETURNED_DATA), EasyMock.eq(TEST_CACHE_KEY))).andReturn(TEST_RETURNED_DATA);
        EasyMock.replay(mockCacheManager);

        // when
        requestProcessorUnderTest.addRequest(stubRequest, requestListenerSet);
]]>
</codefragment>
</duplication>
<duplication lines="23" tokens="135">
<file line="192" path="/Users/stephanenicolas/git/robospice/robospice-core-parent/robospice-core-test/src/main/java/com/octo/android/robospice/request/RequestProcessorTest.java"/>
<file line="223" path="/Users/stephanenicolas/git/robospice/robospice-core-parent/robospice-core-test/src/main/java/com/octo/android/robospice/request/RequestProcessorTest.java"/>
<codefragment>
<![CDATA[
        stubRequest.setRetryPolicy(null);

        RequestListenerWithProgressStub<String> mockRequestListener = new RequestListenerWithProgressStub<String>();
        Set<RequestListener<?>> requestListenerSet = new HashSet<RequestListener<?>>();
        requestListenerSet.add(mockRequestListener);

        EasyMock.expect(mockCacheManager.loadDataFromCache(EasyMock.eq(TEST_CLASS), EasyMock.eq(TEST_CACHE_KEY), EasyMock.eq(TEST_DURATION))).andReturn(null);
        EasyMock.replay(mockCacheManager);

        // when
        requestProcessorUnderTest.addRequest(stubRequest, requestListenerSet);

        mockRequestListener.await(REQUEST_COMPLETION_TIME_OUT);

        // then
        EasyMock.verify(mockCacheManager);
        assertTrue(stubRequest.isLoadDataFromNetworkCalled());
        assertTrue(mockRequestListener.isExecutedInUIThread());
        assertFalse(mockRequestListener.isSuccessful());
        assertTrue(mockRequestListener.isComplete());
    }

    public void testObservers_with_AddRequest_when_nothing_is_found_in_cache_and_request_fails() throws CacheLoadingException, CacheSavingException, InterruptedException, CacheCreationException {
]]>
</codefragment>
</duplication>
<duplication lines="14" tokens="127">
<file line="773" path="/Users/stephanenicolas/git/robospice/robospice-core-parent/robospice-core-test/src/main/java/com/octo/android/robospice/request/RequestProcessorTest.java"/>
<file line="846" path="/Users/stephanenicolas/git/robospice/robospice-core-parent/robospice-core-test/src/main/java/com/octo/android/robospice/request/RequestProcessorTest.java"/>
<codefragment>
<![CDATA[
        CachedSpiceRequestStub<String> spiceRequestStub2 = createSuccessfulRequest(TEST_CLASS, TEST_CACHE_KEY2, TEST_DURATION, TEST_RETURNED_DATA2);
        spiceRequestStub2.setPriority(SpiceRequest.PRIORITY_HIGH);
        spiceRequestStub2.setRetryPolicy(null);

        RequestListenerWithProgressStub<String> mockRequestListener = new RequestListenerWithProgressStub<String>();
        Set<RequestListener<?>> requestListenerSet = new HashSet<RequestListener<?>>();
        requestListenerSet.add(mockRequestListener);

        RequestListenerWithProgressStub<String> mockRequestListener2 = new RequestListenerWithProgressStub<String>();
        Set<RequestListener<?>> requestListenerSet2 = new HashSet<RequestListener<?>>();
        requestListenerSet2.add(mockRequestListener2);

        SpiceServiceListener listener1 = EasyMock.createMock(SpiceServiceListener.class);
        listener1.onRequestAdded((CachedSpiceRequest<?>) EasyMock.anyObject(), (RequestProcessingContext) EasyMock.anyObject());
]]>
</codefragment>
</duplication>
<duplication lines="10" tokens="126">
<file line="491" path="/Users/stephanenicolas/git/robospice/robospice-core-parent/robospice-core-test/src/main/java/com/octo/android/robospice/request/RequestProcessorTest.java"/>
<file line="528" path="/Users/stephanenicolas/git/robospice/robospice-core-parent/robospice-core-test/src/main/java/com/octo/android/robospice/request/RequestProcessorTest.java"/>
<codefragment>
<![CDATA[
        CachedSpiceRequestStub<String> stubRequest = createSuccessfulRequest(TEST_CLASS, TEST_CACHE_KEY, TEST_DURATION, TEST_RETURNED_DATA, WAIT_BEFORE_REQUEST_EXECUTION);
        CachedSpiceRequestStub<String> stubRequest2 = createSuccessfulRequest(TEST_CLASS, TEST_CACHE_KEY2, TEST_DURATION, TEST_RETURNED_DATA);
        RequestListenerWithProgressStub<String> requestListenerStub = new RequestListenerWithProgressStub<String>();
        RequestListenerWithProgressStub<String> requestListenerStub2 = new RequestListenerWithProgressStub<String>();
        Set<RequestListener<?>> requestListenerSet = new HashSet<RequestListener<?>>();
        requestListenerSet.add(requestListenerStub);
        Set<RequestListener<?>> requestListenerSet2 = new HashSet<RequestListener<?>>();
        requestListenerSet2.add(requestListenerStub2);

        EasyMock.expect(mockCacheManager.loadDataFromCache(EasyMock.eq(TEST_CLASS), EasyMock.eq(TEST_CACHE_KEY2), EasyMock.eq(TEST_DURATION))).andReturn(null);
]]>
</codefragment>
</duplication>
<duplication lines="10" tokens="124">
<file line="164" path="/Users/stephanenicolas/git/robospice/robospice-core-parent/robospice-core-test/src/main/java/com/octo/android/robospice/request/RequestProcessorTest.java"/>
<file line="246" path="/Users/stephanenicolas/git/robospice/robospice-core-parent/robospice-core-test/src/main/java/com/octo/android/robospice/request/RequestProcessorTest.java"/>
<file line="372" path="/Users/stephanenicolas/git/robospice/robospice-core-parent/robospice-core-test/src/main/java/com/octo/android/robospice/request/RequestProcessorTest.java"/>
<codefragment>
<![CDATA[
    public void testAddRequest_when_nothing_is_found_in_cache_and_request_succeeds() throws CacheLoadingException, CacheSavingException, InterruptedException, CacheCreationException {
        // given
        CachedSpiceRequestStub<String> stubRequest = createSuccessfulRequest(TEST_CLASS, TEST_CACHE_KEY, TEST_DURATION, TEST_RETURNED_DATA);

        RequestListenerWithProgressStub<String> mockRequestListener = new RequestListenerWithProgressStub<String>();
        Set<RequestListener<?>> requestListenerSet = new HashSet<RequestListener<?>>();
        requestListenerSet.add(mockRequestListener);

        EasyMock.expect(mockCacheManager.loadDataFromCache(EasyMock.eq(TEST_CLASS), EasyMock.eq(TEST_CACHE_KEY), EasyMock.eq(TEST_DURATION))).andReturn(null);
        EasyMock.expect(mockCacheManager.saveDataToCacheAndReturnData(EasyMock.eq(TEST_RETURNED_DATA), EasyMock.eq(TEST_CACHE_KEY))).andReturn(TEST_RETURNED_DATA);
]]>
</codefragment>
</duplication>
<duplication lines="12" tokens="114">
<file line="248" path="/Users/stephanenicolas/git/robospice/robospice-core-parent/robospice-core-test/src/main/java/com/octo/android/robospice/request/RequestProcessorTest.java"/>
<file line="426" path="/Users/stephanenicolas/git/robospice/robospice-core-parent/robospice-core-test/src/main/java/com/octo/android/robospice/request/RequestProcessorTest.java"/>
<codefragment>
<![CDATA[
        CachedSpiceRequestStub<String> stubRequest = createSuccessfulRequest(TEST_CLASS, TEST_CACHE_KEY, TEST_DURATION, TEST_RETURNED_DATA);

        RequestListenerWithProgressStub<String> mockRequestListener = new RequestListenerWithProgressStub<String>();
        Set<RequestListener<?>> requestListenerSet = new HashSet<RequestListener<?>>();
        requestListenerSet.add(mockRequestListener);

        EasyMock.expect(mockCacheManager.loadDataFromCache(EasyMock.eq(TEST_CLASS), EasyMock.eq(TEST_CACHE_KEY), EasyMock.eq(TEST_DURATION))).andReturn(null);
        EasyMock.expect(mockCacheManager.saveDataToCacheAndReturnData(EasyMock.eq(TEST_RETURNED_DATA), EasyMock.eq(TEST_CACHE_KEY))).andThrow(new CacheSavingException(""));
        EasyMock.replay(mockCacheManager);

        // when
        requestProcessorUnderTest.addRequest(stubRequest, requestListenerSet);
]]>
</codefragment>
</duplication>
<duplication lines="9" tokens="107">
<file line="309" path="/Users/stephanenicolas/git/robospice/robospice-core-parent/robospice-core-test/src/main/java/com/octo/android/robospice/request/RequestProcessorTest.java"/>
<file line="1082" path="/Users/stephanenicolas/git/robospice/robospice-core-parent/robospice-core-test/src/main/java/com/octo/android/robospice/request/RequestProcessorTest.java"/>
<codefragment>
<![CDATA[
        CachedSpiceRequestStub<String> stubRequest = createSuccessfulRequest(TEST_CLASS, TEST_CACHE_KEY, TEST_DURATION, TEST_RETURNED_DATA, WAIT_BEFORE_REQUEST_EXECUTION);

        RequestListenerWithProgressStub<String> mockRequestListener = new RequestListenerWithProgressStub<String>();
        Set<RequestListener<?>> requestListenerSet = new HashSet<RequestListener<?>>();
        requestListenerSet.add(mockRequestListener);

        EasyMock.expect(mockCacheManager.loadDataFromCache(EasyMock.eq(TEST_CLASS), EasyMock.eq(TEST_CACHE_KEY), EasyMock.eq(TEST_DURATION))).andReturn(null);
        EasyMock.expectLastCall().anyTimes();
        EasyMock.expect(mockCacheManager.saveDataToCacheAndReturnData(EasyMock.eq(TEST_RETURNED_DATA), EasyMock.eq(TEST_CACHE_KEY))).andReturn(TEST_RETURNED_DATA);
]]>
</codefragment>
</duplication>
<duplication lines="25" tokens="106">
<file line="804" path="/Users/stephanenicolas/git/robospice/robospice-core-parent/robospice-core-test/src/main/java/com/octo/android/robospice/request/RequestProcessorTest.java"/>
<file line="875" path="/Users/stephanenicolas/git/robospice/robospice-core-parent/robospice-core-test/src/main/java/com/octo/android/robospice/request/RequestProcessorTest.java"/>
<codefragment>
<![CDATA[
        EasyMock.expectLastCall().times(2);
        EasyMock.replay(listener2);

        requestProcessorUnderTest.addSpiceServiceListener(listener1);
        requestProcessorUnderTest.addSpiceServiceListener(listener2);

        // when
        requestProcessorUnderTest.addRequest(spiceRequestStub, requestListenerSet);
        requestProcessorUnderTest.addRequest(spiceRequestStub2, requestListenerSet2);

        mockRequestListener.awaitComplete(REQUEST_COMPLETION_TIME_OUT);
        mockRequestListener.await(REQUEST_COMPLETION_TIME_OUT);
        mockRequestListener2.awaitComplete(REQUEST_COMPLETION_TIME_OUT);
        mockRequestListener2.await(REQUEST_COMPLETION_TIME_OUT);

        // test
        assertTrue(mockRequestListener.isComplete());
        assertTrue(mockRequestListener2.isComplete());
        assertTrue(mockRequestListener.isSuccessful());
        assertTrue(mockRequestListener2.isSuccessful());
        EasyMock.verify(listener1);
        EasyMock.verify(listener2);
    }

    public void test_2_spiceservicelisteners_should_be_notified_of_all_events_from_request_processor_when_request_are_aggregated() throws Exception {
]]>
</codefragment>
</duplication>
<duplication lines="11" tokens="104">
<file line="1049" path="/Users/stephanenicolas/git/robospice/robospice-core-parent/robospice-core-test/src/main/java/com/octo/android/robospice/request/RequestProcessorTest.java"/>
<file line="1078" path="/Users/stephanenicolas/git/robospice/robospice-core-parent/robospice-core-test/src/main/java/com/octo/android/robospice/request/RequestProcessorTest.java"/>
<codefragment>
<![CDATA[
    public void testAddRequest_when_fail_on_error_true_and_request_has_retry_policy_loading_from_cache_throws_exception() throws SpiceException, InterruptedException {
        // given
        CachedSpiceRequestStub<String> stubRequest = createSuccessfulRequest(TEST_CLASS, TEST_CACHE_KEY, TEST_DURATION, TEST_RETURNED_DATA);
        DefaultRetryPolicy retryPolicy = new DefaultRetryPolicy(TEST_RETRY_COUNT, TEST_DELAY_BEFORE_RETRY, TEST_RETRY_BACKOFF_MULTIPLIER);
        stubRequest.setRetryPolicy(retryPolicy);

        RequestListenerWithProgressStub<String> mockRequestListener = new RequestListenerWithProgressStub<String>();
        Set<RequestListener<?>> requestListenerSet = new HashSet<RequestListener<?>>();
        requestListenerSet.add(mockRequestListener);

        EasyMock.expect(mockCacheManager.loadDataFromCache(EasyMock.eq(TEST_CLASS), EasyMock.eq(TEST_CACHE_KEY), EasyMock.eq(TEST_DURATION))).andThrow(new CacheLoadingException(""));
]]>
</codefragment>
</duplication>
<duplication lines="11" tokens="103">
<file line="1021" path="/Users/stephanenicolas/git/robospice/robospice-core-parent/robospice-core-test/src/main/java/com/octo/android/robospice/request/RequestProcessorTest.java"/>
<file line="1080" path="/Users/stephanenicolas/git/robospice/robospice-core-parent/robospice-core-test/src/main/java/com/octo/android/robospice/request/RequestProcessorTest.java"/>
<codefragment>
<![CDATA[
        CachedSpiceRequestStub<String> stubRequest = createFailedRequest(TEST_CLASS, TEST_CACHE_KEY, TEST_DURATION);
        DefaultRetryPolicy retryPolicy = new DefaultRetryPolicy(TEST_RETRY_COUNT, TEST_DELAY_BEFORE_RETRY, TEST_RETRY_BACKOFF_MULTIPLIER);
        stubRequest.setRetryPolicy(retryPolicy);

        RequestListenerWithProgressStub<String> mockRequestListener = new RequestListenerWithProgressStub<String>();
        Set<RequestListener<?>> requestListenerSet = new HashSet<RequestListener<?>>();
        requestListenerSet.add(mockRequestListener);

        EasyMock.expect(mockCacheManager.loadDataFromCache(EasyMock.eq(TEST_CLASS), EasyMock.eq(TEST_CACHE_KEY), EasyMock.eq(TEST_DURATION))).andReturn(null);
        EasyMock.expectLastCall().anyTimes();
        EasyMock.replay(mockCacheManager);
]]>
</codefragment>
</duplication>
<duplication lines="10" tokens="102">
<file line="398" path="/Users/stephanenicolas/git/robospice/robospice-core-parent/robospice-core-test/src/main/java/com/octo/android/robospice/request/RequestProcessorTest.java"/>
<file line="423" path="/Users/stephanenicolas/git/robospice/robospice-core-parent/robospice-core-test/src/main/java/com/octo/android/robospice/request/RequestProcessorTest.java"/>
<codefragment>
<![CDATA[
    public void testAddRequest_when_fail_on_error_true_loading_from_cache_throws_exception() throws CacheLoadingException, CacheSavingException, InterruptedException, CacheCreationException {
        // given
        CachedSpiceRequestStub<String> stubRequest = createSuccessfulRequest(TEST_CLASS, TEST_CACHE_KEY, TEST_DURATION, TEST_RETURNED_DATA);
        stubRequest.setRetryPolicy(null);

        RequestListenerWithProgressStub<String> mockRequestListener = new RequestListenerWithProgressStub<String>();
        Set<RequestListener<?>> requestListenerSet = new HashSet<RequestListener<?>>();
        requestListenerSet.add(mockRequestListener);

        EasyMock.expect(mockCacheManager.loadDataFromCache(EasyMock.eq(TEST_CLASS), EasyMock.eq(TEST_CACHE_KEY), EasyMock.eq(TEST_DURATION))).andThrow(new CacheLoadingException(""));
]]>
</codefragment>
</duplication>
<duplication lines="21" tokens="100">
<file line="93" path="/Users/stephanenicolas/git/robospice/robospice-core-parent/robospice-core-test/src/main/java/com/octo/android/robospice/request/RequestProcessorTest.java"/>
<file line="120" path="/Users/stephanenicolas/git/robospice/robospice-core-parent/robospice-core-test/src/main/java/com/octo/android/robospice/request/RequestProcessorTest.java"/>
<codefragment>
<![CDATA[
        CachedSpiceRequestStub<String> stubRequest = createSuccessfulRequest(TEST_CLASS, cacheKey, TEST_DURATION, TEST_RETURNED_DATA);

        RequestListenerWithProgressStub<String> mockRequestListener = new RequestListenerWithProgressStub<String>();
        Set<RequestListener<?>> requestListenerSet = new HashSet<RequestListener<?>>();
        requestListenerSet.add(mockRequestListener);

        EasyMock.replay(mockCacheManager);

        // when
        requestProcessorUnderTest.addRequest(stubRequest, requestListenerSet);
        mockRequestListener.await(REQUEST_COMPLETION_TIME_OUT);

        // then
        EasyMock.verify(mockCacheManager);
        assertTrue(stubRequest.isLoadDataFromNetworkCalled());
        assertTrue(mockRequestListener.isExecutedInUIThread());
        assertTrue(mockRequestListener.isSuccessful());
        assertTrue(mockRequestListener.isComplete());
    }

    public void testObservers_with_AddRequest_when_cache_is_not_used() throws InterruptedException {
]]>
</codefragment>
</duplication>
<duplication lines="14" tokens="100">
<file line="691" path="/Users/stephanenicolas/git/robospice/robospice-core-parent/robospice-core-test/src/main/java/com/octo/android/robospice/request/RequestProcessorTest.java"/>
<file line="730" path="/Users/stephanenicolas/git/robospice/robospice-core-parent/robospice-core-test/src/main/java/com/octo/android/robospice/request/RequestProcessorTest.java"/>
<codefragment>
<![CDATA[
        mockSpiceServiceListener.onRequestFailed((CachedSpiceRequest<?>) EasyMock.anyObject(), (RequestProcessingContext) EasyMock.anyObject());
        mockSpiceServiceListener.onRequestProcessed((CachedSpiceRequest<?>) EasyMock.anyObject(), (RequestProcessingContext) EasyMock.anyObject());
        EasyMock.expectLastCall().anyTimes();
        EasyMock.replay(mockSpiceServiceListener);
        requestProcessorUnderTest.addSpiceServiceListener(mockSpiceServiceListener);

        // when
        requestProcessorUnderTest.setFailOnCacheError(true);
        networkStateChecker.setNetworkAvailable(false);
        requestProcessorUnderTest.addRequest(stubRequest, requestListenerSet);

        mockRequestListener.await(REQUEST_COMPLETION_TIME_OUT);
        // then
        EasyMock.verify(mockCacheManager);
]]>
</codefragment>
</duplication>
</pmd-cpd>